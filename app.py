import json
import requests
from slack_sdk import WebClient
from slack_sdk.errors import SlackApiError
from flask import Flask, request, jsonify
from datetime import datetime, timedelta, timezone

import logging

# Enable logging for debugging
logging.basicConfig(level=logging.DEBUG)

app = Flask(__name__)

# Slack token and channel (configure them in a json file)
with open("config.json", "r") as f:
    config = json.load(f)

SLACK_TOKEN = config["slack_token"]
ADMIN_EMAIL = config["admin_email"]  # Slack channel where you will receive the notifications

client = WebClient(token=SLACK_TOKEN)

# Function to fetch vulnerabilities from the NVD API
def fetch_vulnerabilities():
    url = "https://services.nvd.nist.gov/rest/json/cves/2.0"
    
    # Set the date range to the last 7 days, with correct timezone handling
    start_date = (datetime.now(timezone.utc) - timedelta(days=7)).strftime("%Y-%m-%dT%H:%M:%S.%f")[:-3] + "Z"
    end_date = datetime.now(timezone.utc).strftime("%Y-%m-%dT%H:%M:%S.%f")[:-3] + "Z"
    
    params = {
        'resultsPerPage': 5,  # Fetch 5 vulnerabilities for demo
        'pubStartDate': start_date,
        'pubEndDate': end_date
    }
    headers = {
        "Content-Type": "application/json"
    }
    
    # Send the GET request
    response = requests.get(url, params=params, headers=headers)
    
    # Check if the request was successful
    if response.status_code != 200:
        print(f"Failed to fetch vulnerabilities. Status code: {response.status_code}")
        print(f"Response text: {response.text}")
        return []
    
    try:
        data = response.json()
        if "vulnerabilities" in data:
            return data["vulnerabilities"]
        else:
            print("No vulnerabilities found.")
            return []
    except requests.exceptions.JSONDecodeError:
        print("Error parsing the JSON response.")
        print(f"Response text: {response.text}")
        return []

# Send vulnerability details to the admin user on Slack with interactive blocks
def send_vulnerability_message(vulnerability):
    # Extract necessary data
    cve_id = vulnerability['cve']['id']
    description = next((desc['value'] for desc in vulnerability['cve']['descriptions'] if desc['lang'] == 'en'), 'No description available.')

    # Construct the interactive message with Block Kit (multi-user selection and forward button)
    blocks = [
        {
            "type": "section",
            "text": {
                "type": "mrkdwn",
                "text": f"*New Vulnerability Found:*\n*ID:* {cve_id}\n*Description:* {description}"
            }
        },
        {
            "type": "divider"
        },
        {
            "type": "section",
            "text": {
                "type": "mrkdwn",
                "text": "Select members to forward this vulnerability to:"
            },
            "accessory": {
                "type": "multi_users_select",
                "placeholder": {
                    "type": "plain_text",
                    "text": "Select members"
                },
                "action_id": "user_selection"
            }
        },
        {
            "type": "actions",
            "elements": [
                {
                    "type": "button",
                    "text": {
                        "type": "plain_text",
                        "text": "Forward"
                    },
                    "style": "primary",
                    "action_id": "forward_vulnerability"
                }
            ]
        }
    ]

    # Send the interactive message
    try:
        response = client.chat_postMessage(
            channel=ADMIN_EMAIL,  # Replace with your actual channel name
            blocks=blocks,
            text="New Vulnerability Notification"
        )
        print("Message with interactive elements sent to Slack.")
    except SlackApiError as e:
        print(f"Error sending message: {e.response['error']}")

# Flask route to handle interactivity (user selection and forward button)
@app.route('/slack/events', methods=['POST'])
def slack_events():
    try:
        # Slack sends interactive payloads in `application/x-www-form-urlencoded`, so we need to parse it properly
        if request.content_type == 'application/json':
            payload = request.json
        else:
            form_data = request.form
            payload = json.loads(form_data.get('payload', '{}'))  # Extract the payload from the form data
        
        # Log the full payload for debugging
        logging.debug(f"Full Payload Received: {json.dumps(payload, indent=2)}")

        # Handle button click or user selection
        if 'actions' in payload:
            action_id = payload['actions'][0]['action_id']
            logging.debug(f"Action ID: {action_id}")

            if action_id == 'forward_vulnerability':
                # Extract selected users dynamically by iterating over state.values
                selected_users = []
                for block_id, action_data in payload['state']['values'].items():
                    if 'user_selection' in action_data:
                        selected_users = action_data['user_selection'].get('selected_users', [])
                        break  # Assuming there's only one user_selection

                # Log selected users for debugging
                logging.debug(f"Selected Users: {selected_users}")

                if not selected_users:
                    logging.error("No users were selected for forwarding.")
                    return jsonify({'status': 'error', 'message': 'No users selected'}), 400

                # Build a message for the selected users with remediation text box
                # Extract the vulnerability description from the original message
                # Assuming the first block is the section with vulnerability details
                vulnerability_text = ""
                try:
                    vulnerability_text = payload['message']['blocks'][0]['text']['text']
                except (KeyError, IndexError) as e:
                    logging.error(f"Error extracting vulnerability text: {e}")
                    vulnerability_text = "No description available."

                forward_message_blocks = [
                    {
                        "type": "section",
                        "text": {
                            "type": "mrkdwn",
                            "text": f"*Forwarded Vulnerability:*\n*Description:* {vulnerability_text}"
                        }
                    },
                    {
                        "type": "input",
                        "element": {
                            "type": "plain_text_input",
                            "action_id": "remediation_input"
                        },
                        "label": {
                            "type": "plain_text",
                            "text": "Describe the remediation steps:"
                        }
                    },
                    {
                        "type": "actions",
                        "elements": [
                            {
                                "type": "button",
                                "text": {
                                    "type": "plain_text",
                                    "text": "Reply"
                                },
                                "style": "primary",
                                "action_id": "confirm_remediation"
                            }
                        ]
                    }
                ]

                # Send message to each selected user
                for user in selected_users:
                    try:
                        client.chat_postMessage(
                            channel=user,  # Direct message to selected users
                            blocks=forward_message_blocks,
                            text="Forwarded Vulnerability"
                        )
                    except SlackApiError as e:
                        logging.error(f"Error forwarding message to user {user}: {e.response['error']}")
                        return jsonify({'status': 'error', 'message': f"Failed to forward to user {user}"}), 500

                return jsonify({'status': 'success'})

        logging.warning("No action found in the payload.")
        return jsonify({'status': 'ignored'}), 200

    except Exception as e:
        logging.error(f"An error occurred: {e}")
        return jsonify({'status': 'error', 'message': 'Internal Server Error'}), 500

# Start the Flask app
if __name__ == "__main__":
    vulnerabilities = fetch_vulnerabilities()
    if vulnerabilities:
        for vulnerability in vulnerabilities:
            send_vulnerability_message(vulnerability)

    app.run(port=5000)
